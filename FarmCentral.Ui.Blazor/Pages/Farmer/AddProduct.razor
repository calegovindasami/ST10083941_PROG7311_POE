@page "/addproduct"
@using Blazored.LocalStorage;
@using FarmCentral.Ui.Blazor.Pages.Shared
@using FarmCentral.Ui.Blazor.Providers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@using FarmCentral.Library.Shared.Models.DTOs;
@using FarmCentral.Ui.Blazor.Services.Application_Services;
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Farmer")]
        
<MudPaper Outlined="true" Style="width:100%;">
    <MudStack Row="true" Justify="Justify.SpaceAround">
        <MudPaper Class="px-5 py-5" Style="width: 30%;" Elevation="0">
            <EditForm Model="farmerProduct" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h3" Class="mb-4" Style="text-align: center;">Add Product</MudText>
                <MudStack>
                    <MudTextField Label="Product Name" @bind-Value="farmerProduct.ProductName" For="@(() => farmerProduct.ProductName)"></MudTextField>
                    <MudNumericField Label="Quantity" @bind-Value="farmerProduct.Quantity" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Numbers" For="@(() => farmerProduct.Quantity)" Min="1" Max="100000000"></MudNumericField>
                    <MudNumericField Label="Price Per Unit" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="farmerProduct.PricePerUnit" Format="F2" For="@(() => farmerProduct.PricePerUnit)" Min="1M" Max="10000000M"></MudNumericField>
                    <MudDatePicker MaxDate="DateTime.Today" Label="Transaction Date" @bind-Date="farmerProduct.DateAdded" For="@(() => farmerProduct.DateAdded)" />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="font-size: 24px" FullWidth="true" Class="mt-4">Submit</MudButton>
                </MudStack>
            </EditForm>
        </MudPaper>

        <ViewFarmerProducts @ref="tblProducts" UserID="@farmerProduct.FarmerId"></ViewFarmerProducts>
    </MudStack>
</MudPaper>

@code {
    private FarmerProductDto farmerProduct = new();
    private ViewFarmerProducts? tblProducts;

    private async Task OnValidSubmit()
    {
        HttpClient client = ApplicationClient.GetClient();

        var result = await client.PostAsJsonAsync("api/FarmerProduct/post", farmerProduct);

        try
        {
            result.EnsureSuccessStatusCode();
            Snackbar.Add("Product has been added.", Severity.Success);
            await tblProducts!.LoadData();
            farmerProduct = new();
            StateHasChanged();

        }
        catch (Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var uid = authenticationState.User.Claims.First(x => x.Type == "uid").Value;
        farmerProduct.FarmerId = uid;

    }

}
