@using FarmCentral.Library.Shared.Models.DTOs;
@using FarmCentral.Ui.Blazor.Services.Application_Services;
@using Newtonsoft.Json;
@using System.Globalization;
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudTable Bordered="true" Items="FarmerProducts" Filter="new Func<FarmerProductDto,bool>(FilterFunc1)" Style="width: 70%;" Elevation="0">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudStack Row="true" Spacing="2">
            <MudDateRangePicker MinDate="DateTime.Today.AddYears(-100)" MaxDate="DateTime.Today" @ref="_picker" Label="Filter by Date" @bind-DateRange="dateRange" DateFormat="dd/MM/yyyy">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => ClearDates())">Clear</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => FilterByDate())">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Product Name</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Price per Unit</MudTh>
        <MudTh>Transaction Date</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Price per Unit">@context.PricePerUnit.ToString("C2", CultureInfo.CurrentCulture)</MudTd>
        <MudTd DataLabel="Transaction Date">@context.DateAdded!.Value.ToShortDateString()</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public string? UserID { get; set; }
    List<FarmerProductDto>? FarmerProducts;
    List<FarmerProductDto>? FilteredFarmerProducts;
    private string? _searchString = "";
    MudDateRangePicker _picker;
    private DateRange dateRange;

    protected async override Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private void OnDateRangeChange(DateRange range)
    {
    }

    //Loads the db data into the farmer product list.
    public async Task LoadData()
    {
        HttpClient client = ApplicationClient.GetClient();
        var response =await client.GetAsync("api/FarmerProduct/get");

        try
        {
            response.EnsureSuccessStatusCode();
            string json = await response.Content.ReadAsStringAsync();
            FarmerProducts = JsonConvert.DeserializeObject<List<FarmerProductDto>>(json)!;
            FarmerProducts = FarmerProducts.Where(x => x.FarmerId == UserID).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    //Clears the daterange picker.
    public async Task ClearDates()
    {
        _picker.Clear();
        await LoadData();
    }

    //Filters the product list by the specified date entered into the date range.
    public async Task FilterByDate()
    {
        _picker.Close();
        var startDate = _picker.DateRange.Start;
        var endDate = _picker.DateRange.End;
        var filteredProducts = FarmerProducts!.Where(x => x.DateAdded >= startDate & x.DateAdded <= endDate).ToList();

        if (filteredProducts.Count == 0)
        {
            Snackbar.Add("No products between those dates", Severity.Warning);
        }
        else
        {
            FarmerProducts = filteredProducts;
        }
        StateHasChanged();
    }


   
    //Code Attribution
    //Author: MudBlazor
    //Taken from:https://mudblazor.com/components/table#tablepager-customization
    private bool FilterFunc1(FarmerProductDto product) => FilterFunc(product, _searchString);

    //Method to determine if the search string is valid.
    private bool FilterFunc(FarmerProductDto product, string searchString)
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return true;
        }
        if (product.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    //End of code attribution.

}
