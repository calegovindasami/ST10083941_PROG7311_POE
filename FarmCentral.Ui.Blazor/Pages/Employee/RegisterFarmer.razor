@page "/registerfarmer"

@using FarmCentral.Ui.Blazor.Services.Application_Services;
@using Newtonsoft.Json
@using System.Net.Http.Json
@using FarmCentral.Library.Shared.Contracts;
@using FarmCentral.Library.Shared.Models.DTOs;
@using FarmCentral.Library.Shared.Models.Identity;
@inject ISnackbar Snackbar
@inject IAuthenticationService authService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Employee")]

    <MudPaper Outlined="true" Style="width:100%;">
    <MudStack Row="true" Justify="Justify.SpaceAround">
        <MudPaper Class="px-5 py-5" Style="width: 30%;" Elevation="0">
            <EditForm Model="request" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h3" Class="mb-4" Style="text-align: center;">Add Farmer</MudText>
                <MudStack Spacing="2" Justify="Justify.Center">
                    <MudStack Row="true">
                        <MudTextField Label="First Name" @bind-Value="request.FirstName" @bind-Text="request.FirstName" For="@(() => request.FirstName)"></MudTextField>
                        <MudTextField Label="Last Name" @bind-Value="request.LastName" @bind-Text="request.LastName" For="@(() => request.LastName)"></MudTextField>
                    </MudStack>

                    <MudTextField Label="Email Address" Adornment="Adornment.Start" @bind-Text="request.Email" AdornmentIcon="@Icons.Material.Filled.Email" @bind-Value="request.Email" For="@(() => request.Email)"></MudTextField>
                    <MudTextField Label="Address" Adornment="Adornment.Start" @bind-Text="request.Address" AdornmentIcon="@Icons.Material.Filled.House" @bind-Value="request.Address" For="@(() => request.Address)"></MudTextField>
                    <MudDatePicker MaxDate="DateTime.Today.AddYears(-18)" Label="Date of Birth" @bind-Date="farmerDto.DateOfBirth" For="@(() => farmerDto.DateOfBirth)" />
                    <MudTextField  InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password" Label="Password" @bind-Value="request.Password" @bind-Text="request.Password" For="@(() => request.Password)"></MudTextField>
                    <MudAlert Class="mt-2" Severity="Severity.Normal" Variant="Variant.Outlined">
                        Passwords must contain:
                        an uppercase letter,
                        a number
                        and a special symbol.
                    </MudAlert>
                </MudStack>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="font-size: 24px" FullWidth="true" Class="mt-4">Submit</MudButton>
            </EditForm>
        </MudPaper>

        <MudTable Items="@Farmers" T="FarmerDto" MultiSelection="false" OnRowClick="OnRowClick" Style="width: 70%;" Elevation="0" Hover="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Farmers</MudText>
                <MudSpacer />            
            </ToolBarContent>

            <HeaderContent>
                <MudTh>First Name</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Date of Birth</MudTh>
                <MudTh>Address</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Date of Birth">@context.DateOfBirth!.Value.ToShortDateString()</MudTd>
                <MudTd DataLabel="Address">@context.Address</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudStack>
    </MudPaper>

@code {
    private RegistrationRequest request = new();
    private FarmerDto farmerDto = new();
    private string? _searchString;

    private List<FarmerDto>? Farmers;

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    //Loads data into the Farmer list
    private async Task LoadData()
    {
        HttpClient client = ApplicationClient.GetClient();
        var response = await client.GetAsync("api/Farmer/get");

        try
        {
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            Farmers = JsonConvert.DeserializeObject<List<FarmerDto>>(json)!;

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    //Allows employee to view farmers products when clicking on row.
    private void OnRowClick(TableRowClickEventArgs<FarmerDto> args)
    {
        var farmerID= $"{args.Item.FarmerId}";
        NavigationManager.NavigateTo($"/viewfarmer/{farmerID}");
    }

    //Registers the farmer in the identity database and the main database.
    public async Task OnValidSubmit()
    {
        farmerDto.FirstName = request.FirstName;
        farmerDto.LastName = request.LastName;
        farmerDto.Email = request.Email;
        farmerDto.Address = request.Address;


        request.Role = "Farmer";
        try
        {
            var identityResponse = await authService.RegisterAsync(request);
            if (identityResponse == null)
            {
                throw new Exception("Invalid registration.");
            }
            farmerDto.FarmerId = identityResponse;


            HttpClient client = ApplicationClient.GetClient();
            var applicationResponse = await client.PostAsJsonAsync("api/Farmer/post", farmerDto);
            applicationResponse.EnsureSuccessStatusCode();
            Snackbar.Add("Successfully Registered", Severity.Success);
            request = new RegistrationRequest();
            farmerDto = new FarmerDto();
            await LoadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            StateHasChanged();
        }
    }
}
